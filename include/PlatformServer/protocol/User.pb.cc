// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dlp {

namespace {

const ::google::protobuf::Descriptor* UserAuthen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuthen_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSession_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_User_2eproto() {
  protobuf_AddDesc_User_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "User.proto");
  GOOGLE_CHECK(file != NULL);
  UserAuthen_descriptor_ = file->message_type(0);
  static const int UserAuthen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthen, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthen, keyword_),
  };
  UserAuthen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuthen_descriptor_,
      UserAuthen::default_instance_,
      UserAuthen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuthen));
  UserInfor_descriptor_ = file->message_type(1);
  static const int UserInfor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfor, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfor, partment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfor, componey_),
  };
  UserInfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfor_descriptor_,
      UserInfor::default_instance_,
      UserInfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfor));
  UserSession_descriptor_ = file->message_type(2);
  static const int UserSession_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, time_),
  };
  UserSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSession_descriptor_,
      UserSession::default_instance_,
      UserSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSession));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_User_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuthen_descriptor_, &UserAuthen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfor_descriptor_, &UserInfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSession_descriptor_, &UserSession::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_User_2eproto() {
  delete UserAuthen::default_instance_;
  delete UserAuthen_reflection_;
  delete UserInfor::default_instance_;
  delete UserInfor_reflection_;
  delete UserSession::default_instance_;
  delete UserSession_reflection_;
}

void protobuf_AddDesc_User_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nUser.proto\022\003dlp\"+\n\nUserAuthen\022\014\n\004type\030"
    "\001 \002(\005\022\017\n\007keyword\030\002 \002(\t\"M\n\tUserInfor\022\016\n\006u"
    "serid\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010partment\030\003 "
    "\002(\t\022\020\n\010componey\030\004 \002(\t\"C\n\013UserSession\022\014\n\004"
    "type\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\022\014\n\004cert\030\003 \002(\t\022\014\n\004"
    "time\030\004 \002(\tB \n\020com.dlp.datalockB\014AuthenPr"
    "otos", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
  UserAuthen::default_instance_ = new UserAuthen();
  UserInfor::default_instance_ = new UserInfor();
  UserSession::default_instance_ = new UserSession();
  UserAuthen::default_instance_->InitAsDefaultInstance();
  UserInfor::default_instance_->InitAsDefaultInstance();
  UserSession::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_User_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_User_2eproto {
  StaticDescriptorInitializer_User_2eproto() {
    protobuf_AddDesc_User_2eproto();
  }
} static_descriptor_initializer_User_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserAuthen::kTypeFieldNumber;
const int UserAuthen::kKeywordFieldNumber;
#endif  // !_MSC_VER

UserAuthen::UserAuthen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlp.UserAuthen)
}

void UserAuthen::InitAsDefaultInstance() {
}

UserAuthen::UserAuthen(const UserAuthen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dlp.UserAuthen)
}

void UserAuthen::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuthen::~UserAuthen() {
  // @@protoc_insertion_point(destructor:dlp.UserAuthen)
  SharedDtor();
}

void UserAuthen::SharedDtor() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void UserAuthen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAuthen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuthen_descriptor_;
}

const UserAuthen& UserAuthen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UserAuthen* UserAuthen::default_instance_ = NULL;

UserAuthen* UserAuthen::New() const {
  return new UserAuthen;
}

void UserAuthen::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuthen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlp.UserAuthen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keyword;
        break;
      }

      // required string keyword = 2;
      case 2: {
        if (tag == 18) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlp.UserAuthen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlp.UserAuthen)
  return false;
#undef DO_
}

void UserAuthen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlp.UserAuthen)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string keyword = 2;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keyword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlp.UserAuthen)
}

::google::protobuf::uint8* UserAuthen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlp.UserAuthen)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string keyword = 2;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keyword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlp.UserAuthen)
  return target;
}

int UserAuthen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string keyword = 2;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAuthen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuthen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuthen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuthen::MergeFrom(const UserAuthen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuthen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuthen::CopyFrom(const UserAuthen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuthen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserAuthen::Swap(UserAuthen* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(keyword_, other->keyword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuthen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuthen_descriptor_;
  metadata.reflection = UserAuthen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfor::kUseridFieldNumber;
const int UserInfor::kNameFieldNumber;
const int UserInfor::kPartmentFieldNumber;
const int UserInfor::kComponeyFieldNumber;
#endif  // !_MSC_VER

UserInfor::UserInfor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlp.UserInfor)
}

void UserInfor::InitAsDefaultInstance() {
}

UserInfor::UserInfor(const UserInfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dlp.UserInfor)
}

void UserInfor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  componey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfor::~UserInfor() {
  // @@protoc_insertion_point(destructor:dlp.UserInfor)
  SharedDtor();
}

void UserInfor::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (partment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partment_;
  }
  if (componey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componey_;
  }
  if (this != default_instance_) {
  }
}

void UserInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfor_descriptor_;
}

const UserInfor& UserInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UserInfor* UserInfor::default_instance_ = NULL;

UserInfor* UserInfor::New() const {
  return new UserInfor;
}

void UserInfor::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_partment()) {
      if (partment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        partment_->clear();
      }
    }
    if (has_componey()) {
      if (componey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlp.UserInfor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_partment;
        break;
      }

      // required string partment = 3;
      case 3: {
        if (tag == 26) {
         parse_partment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partment().data(), this->partment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "partment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_componey;
        break;
      }

      // required string componey = 4;
      case 4: {
        if (tag == 34) {
         parse_componey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componey().data(), this->componey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlp.UserInfor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlp.UserInfor)
  return false;
#undef DO_
}

void UserInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlp.UserInfor)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string partment = 3;
  if (has_partment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partment().data(), this->partment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partment(), output);
  }

  // required string componey = 4;
  if (has_componey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componey().data(), this->componey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->componey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlp.UserInfor)
}

::google::protobuf::uint8* UserInfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlp.UserInfor)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string partment = 3;
  if (has_partment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partment().data(), this->partment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partment(), target);
  }

  // required string componey = 4;
  if (has_componey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componey().data(), this->componey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->componey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlp.UserInfor)
  return target;
}

int UserInfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string partment = 3;
    if (has_partment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partment());
    }

    // required string componey = 4;
    if (has_componey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfor::MergeFrom(const UserInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_partment()) {
      set_partment(from.partment());
    }
    if (from.has_componey()) {
      set_componey(from.componey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfor::CopyFrom(const UserInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserInfor::Swap(UserInfor* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(partment_, other->partment_);
    std::swap(componey_, other->componey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfor_descriptor_;
  metadata.reflection = UserInfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSession::kTypeFieldNumber;
const int UserSession::kIdFieldNumber;
const int UserSession::kCertFieldNumber;
const int UserSession::kTimeFieldNumber;
#endif  // !_MSC_VER

UserSession::UserSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dlp.UserSession)
}

void UserSession::InitAsDefaultInstance() {
}

UserSession::UserSession(const UserSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dlp.UserSession)
}

void UserSession::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSession::~UserSession() {
  // @@protoc_insertion_point(destructor:dlp.UserSession)
  SharedDtor();
}

void UserSession::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void UserSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSession_descriptor_;
}

const UserSession& UserSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UserSession* UserSession::default_instance_ = NULL;

UserSession* UserSession::New() const {
  return new UserSession;
}

void UserSession::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cert_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dlp.UserSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cert;
        break;
      }

      // required string cert = 3;
      case 3: {
        if (tag == 26) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cert().data(), this->cert().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cert");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // required string time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dlp.UserSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dlp.UserSession)
  return false;
#undef DO_
}

void UserSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dlp.UserSession)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // required string cert = 3;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cert().data(), this->cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cert");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cert(), output);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dlp.UserSession)
}

::google::protobuf::uint8* UserSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dlp.UserSession)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required string cert = 3;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cert().data(), this->cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cert");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cert(), target);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dlp.UserSession)
  return target;
}

int UserSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string cert = 3;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cert());
    }

    // required string time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSession::MergeFrom(const UserSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSession::CopyFrom(const UserSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserSession::Swap(UserSession* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(cert_, other->cert_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSession_descriptor_;
  metadata.reflection = UserSession_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dlp

// @@protoc_insertion_point(global_scope)
