// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataLock {

namespace {

const ::google::protobuf::Descriptor* ServiceJoinMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceJoinMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceOutMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceOutMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Service_2eproto() {
  protobuf_AddDesc_Service_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Service.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceJoinMessage_descriptor_ = file->message_type(0);
  static const int ServiceJoinMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceJoinMessage, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceJoinMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceJoinMessage, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceJoinMessage, number_),
  };
  ServiceJoinMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceJoinMessage_descriptor_,
      ServiceJoinMessage::default_instance_,
      ServiceJoinMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceJoinMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceJoinMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceJoinMessage));
  ServiceOutMessage_descriptor_ = file->message_type(1);
  static const int ServiceOutMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOutMessage, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOutMessage, serial_),
  };
  ServiceOutMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceOutMessage_descriptor_,
      ServiceOutMessage::default_instance_,
      ServiceOutMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOutMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOutMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceOutMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Service_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceJoinMessage_descriptor_, &ServiceJoinMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceOutMessage_descriptor_, &ServiceOutMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Service_2eproto() {
  delete ServiceJoinMessage::default_instance_;
  delete ServiceJoinMessage_reflection_;
  delete ServiceOutMessage::default_instance_;
  delete ServiceOutMessage_reflection_;
}

void protobuf_AddDesc_Service_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rService.proto\022\010DataLock\"R\n\022ServiceJoin"
    "Message\022\016\n\006typeid\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\016\n"
    "\006serial\030\003 \002(\005\022\016\n\006number\030\004 \002(\005\"3\n\021Service"
    "OutMessage\022\016\n\006typeid\030\001 \002(\005\022\016\n\006serial\030\002 \002"
    "(\005B!\n\020com.dlp.datalockB\rServiceProtos", 197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Service.proto", &protobuf_RegisterTypes);
  ServiceJoinMessage::default_instance_ = new ServiceJoinMessage();
  ServiceOutMessage::default_instance_ = new ServiceOutMessage();
  ServiceJoinMessage::default_instance_->InitAsDefaultInstance();
  ServiceOutMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Service_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Service_2eproto {
  StaticDescriptorInitializer_Service_2eproto() {
    protobuf_AddDesc_Service_2eproto();
  }
} static_descriptor_initializer_Service_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServiceJoinMessage::kTypeidFieldNumber;
const int ServiceJoinMessage::kNameFieldNumber;
const int ServiceJoinMessage::kSerialFieldNumber;
const int ServiceJoinMessage::kNumberFieldNumber;
#endif  // !_MSC_VER

ServiceJoinMessage::ServiceJoinMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataLock.ServiceJoinMessage)
}

void ServiceJoinMessage::InitAsDefaultInstance() {
}

ServiceJoinMessage::ServiceJoinMessage(const ServiceJoinMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataLock.ServiceJoinMessage)
}

void ServiceJoinMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  typeid__ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceJoinMessage::~ServiceJoinMessage() {
  // @@protoc_insertion_point(destructor:DataLock.ServiceJoinMessage)
  SharedDtor();
}

void ServiceJoinMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceJoinMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceJoinMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceJoinMessage_descriptor_;
}

const ServiceJoinMessage& ServiceJoinMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

ServiceJoinMessage* ServiceJoinMessage::default_instance_ = NULL;

ServiceJoinMessage* ServiceJoinMessage::New() const {
  return new ServiceJoinMessage;
}

void ServiceJoinMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServiceJoinMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(typeid__, number_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceJoinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataLock.ServiceJoinMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serial;
        break;
      }

      // required int32 serial = 3;
      case 3: {
        if (tag == 24) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_number;
        break;
      }

      // required int32 number = 4;
      case 4: {
        if (tag == 32) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataLock.ServiceJoinMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataLock.ServiceJoinMessage)
  return false;
#undef DO_
}

void ServiceJoinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataLock.ServiceJoinMessage)
  // required int32 typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 serial = 3;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial(), output);
  }

  // required int32 number = 4;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataLock.ServiceJoinMessage)
}

::google::protobuf::uint8* ServiceJoinMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataLock.ServiceJoinMessage)
  // required int32 typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 serial = 3;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial(), target);
  }

  // required int32 number = 4;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataLock.ServiceJoinMessage)
  return target;
}

int ServiceJoinMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 serial = 3;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // required int32 number = 4;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceJoinMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceJoinMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceJoinMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceJoinMessage::MergeFrom(const ServiceJoinMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceJoinMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceJoinMessage::CopyFrom(const ServiceJoinMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceJoinMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServiceJoinMessage::Swap(ServiceJoinMessage* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(name_, other->name_);
    std::swap(serial_, other->serial_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceJoinMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceJoinMessage_descriptor_;
  metadata.reflection = ServiceJoinMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceOutMessage::kTypeidFieldNumber;
const int ServiceOutMessage::kSerialFieldNumber;
#endif  // !_MSC_VER

ServiceOutMessage::ServiceOutMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataLock.ServiceOutMessage)
}

void ServiceOutMessage::InitAsDefaultInstance() {
}

ServiceOutMessage::ServiceOutMessage(const ServiceOutMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataLock.ServiceOutMessage)
}

void ServiceOutMessage::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  serial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceOutMessage::~ServiceOutMessage() {
  // @@protoc_insertion_point(destructor:DataLock.ServiceOutMessage)
  SharedDtor();
}

void ServiceOutMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceOutMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceOutMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceOutMessage_descriptor_;
}

const ServiceOutMessage& ServiceOutMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Service_2eproto();
  return *default_instance_;
}

ServiceOutMessage* ServiceOutMessage::default_instance_ = NULL;

ServiceOutMessage* ServiceOutMessage::New() const {
  return new ServiceOutMessage;
}

void ServiceOutMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServiceOutMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typeid__, serial_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceOutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataLock.ServiceOutMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 typeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // required int32 serial = 2;
      case 2: {
        if (tag == 16) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataLock.ServiceOutMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataLock.ServiceOutMessage)
  return false;
#undef DO_
}

void ServiceOutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataLock.ServiceOutMessage)
  // required int32 typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // required int32 serial = 2;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataLock.ServiceOutMessage)
}

::google::protobuf::uint8* ServiceOutMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataLock.ServiceOutMessage)
  // required int32 typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // required int32 serial = 2;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataLock.ServiceOutMessage)
  return target;
}

int ServiceOutMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // required int32 serial = 2;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceOutMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceOutMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceOutMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceOutMessage::MergeFrom(const ServiceOutMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceOutMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceOutMessage::CopyFrom(const ServiceOutMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceOutMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServiceOutMessage::Swap(ServiceOutMessage* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(serial_, other->serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceOutMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceOutMessage_descriptor_;
  metadata.reflection = ServiceOutMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataLock

// @@protoc_insertion_point(global_scope)
