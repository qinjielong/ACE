// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef PROTOBUF_User_2eproto__INCLUDED
#define PROTOBUF_User_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dlp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_User_2eproto();
void protobuf_AssignDesc_User_2eproto();
void protobuf_ShutdownFile_User_2eproto();

class UserAuthen;
class UserInfor;
class UserSession;

// ===================================================================

class UserAuthen : public ::google::protobuf::Message {
 public:
  UserAuthen();
  virtual ~UserAuthen();

  UserAuthen(const UserAuthen& from);

  inline UserAuthen& operator=(const UserAuthen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuthen& default_instance();

  void Swap(UserAuthen* other);

  // implements Message ----------------------------------------------

  UserAuthen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuthen& from);
  void MergeFrom(const UserAuthen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string keyword = 2;
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 2;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const char* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  inline void set_allocated_keyword(::std::string* keyword);

  // @@protoc_insertion_point(class_scope:dlp.UserAuthen)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_keyword();
  inline void clear_has_keyword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* keyword_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UserAuthen* default_instance_;
};
// -------------------------------------------------------------------

class UserInfor : public ::google::protobuf::Message {
 public:
  UserInfor();
  virtual ~UserInfor();

  UserInfor(const UserInfor& from);

  inline UserInfor& operator=(const UserInfor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfor& default_instance();

  void Swap(UserInfor* other);

  // implements Message ----------------------------------------------

  UserInfor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfor& from);
  void MergeFrom(const UserInfor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string partment = 3;
  inline bool has_partment() const;
  inline void clear_partment();
  static const int kPartmentFieldNumber = 3;
  inline const ::std::string& partment() const;
  inline void set_partment(const ::std::string& value);
  inline void set_partment(const char* value);
  inline void set_partment(const char* value, size_t size);
  inline ::std::string* mutable_partment();
  inline ::std::string* release_partment();
  inline void set_allocated_partment(::std::string* partment);

  // required string componey = 4;
  inline bool has_componey() const;
  inline void clear_componey();
  static const int kComponeyFieldNumber = 4;
  inline const ::std::string& componey() const;
  inline void set_componey(const ::std::string& value);
  inline void set_componey(const char* value);
  inline void set_componey(const char* value, size_t size);
  inline ::std::string* mutable_componey();
  inline ::std::string* release_componey();
  inline void set_allocated_componey(::std::string* componey);

  // @@protoc_insertion_point(class_scope:dlp.UserInfor)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_partment();
  inline void clear_has_partment();
  inline void set_has_componey();
  inline void clear_has_componey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* userid_;
  ::std::string* name_;
  ::std::string* partment_;
  ::std::string* componey_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UserInfor* default_instance_;
};
// -------------------------------------------------------------------

class UserSession : public ::google::protobuf::Message {
 public:
  UserSession();
  virtual ~UserSession();

  UserSession(const UserSession& from);

  inline UserSession& operator=(const UserSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSession& default_instance();

  void Swap(UserSession* other);

  // implements Message ----------------------------------------------

  UserSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSession& from);
  void MergeFrom(const UserSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string cert = 3;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 3;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const char* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  inline void set_allocated_cert(::std::string* cert);

  // required string time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:dlp.UserSession)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* cert_;
  ::std::string* time_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UserSession* default_instance_;
};
// ===================================================================


// ===================================================================

// UserAuthen

// required int32 type = 1;
inline bool UserAuthen::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAuthen::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAuthen::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAuthen::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserAuthen::type() const {
  // @@protoc_insertion_point(field_get:dlp.UserAuthen.type)
  return type_;
}
inline void UserAuthen::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dlp.UserAuthen.type)
}

// required string keyword = 2;
inline bool UserAuthen::has_keyword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAuthen::set_has_keyword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAuthen::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAuthen::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& UserAuthen::keyword() const {
  // @@protoc_insertion_point(field_get:dlp.UserAuthen.keyword)
  return *keyword_;
}
inline void UserAuthen::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserAuthen.keyword)
}
inline void UserAuthen::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserAuthen.keyword)
}
inline void UserAuthen::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserAuthen.keyword)
}
inline ::std::string* UserAuthen::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserAuthen.keyword)
  return keyword_;
}
inline ::std::string* UserAuthen::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAuthen::set_allocated_keyword(::std::string* keyword) {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (keyword) {
    set_has_keyword();
    keyword_ = keyword;
  } else {
    clear_has_keyword();
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserAuthen.keyword)
}

// -------------------------------------------------------------------

// UserInfor

// required string userid = 1;
inline bool UserInfor::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfor::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfor::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfor::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& UserInfor::userid() const {
  // @@protoc_insertion_point(field_get:dlp.UserInfor.userid)
  return *userid_;
}
inline void UserInfor::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserInfor.userid)
}
inline void UserInfor::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserInfor.userid)
}
inline void UserInfor::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserInfor.userid)
}
inline ::std::string* UserInfor::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserInfor.userid)
  return userid_;
}
inline ::std::string* UserInfor::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfor::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserInfor.userid)
}

// required string name = 2;
inline bool UserInfor::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfor::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfor::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfor::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserInfor::name() const {
  // @@protoc_insertion_point(field_get:dlp.UserInfor.name)
  return *name_;
}
inline void UserInfor::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserInfor.name)
}
inline void UserInfor::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserInfor.name)
}
inline void UserInfor::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserInfor.name)
}
inline ::std::string* UserInfor::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserInfor.name)
  return name_;
}
inline ::std::string* UserInfor::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfor::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserInfor.name)
}

// required string partment = 3;
inline bool UserInfor::has_partment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfor::set_has_partment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfor::clear_has_partment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfor::clear_partment() {
  if (partment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partment_->clear();
  }
  clear_has_partment();
}
inline const ::std::string& UserInfor::partment() const {
  // @@protoc_insertion_point(field_get:dlp.UserInfor.partment)
  return *partment_;
}
inline void UserInfor::set_partment(const ::std::string& value) {
  set_has_partment();
  if (partment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partment_ = new ::std::string;
  }
  partment_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserInfor.partment)
}
inline void UserInfor::set_partment(const char* value) {
  set_has_partment();
  if (partment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partment_ = new ::std::string;
  }
  partment_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserInfor.partment)
}
inline void UserInfor::set_partment(const char* value, size_t size) {
  set_has_partment();
  if (partment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partment_ = new ::std::string;
  }
  partment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserInfor.partment)
}
inline ::std::string* UserInfor::mutable_partment() {
  set_has_partment();
  if (partment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserInfor.partment)
  return partment_;
}
inline ::std::string* UserInfor::release_partment() {
  clear_has_partment();
  if (partment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = partment_;
    partment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfor::set_allocated_partment(::std::string* partment) {
  if (partment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partment_;
  }
  if (partment) {
    set_has_partment();
    partment_ = partment;
  } else {
    clear_has_partment();
    partment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserInfor.partment)
}

// required string componey = 4;
inline bool UserInfor::has_componey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfor::set_has_componey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfor::clear_has_componey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfor::clear_componey() {
  if (componey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componey_->clear();
  }
  clear_has_componey();
}
inline const ::std::string& UserInfor::componey() const {
  // @@protoc_insertion_point(field_get:dlp.UserInfor.componey)
  return *componey_;
}
inline void UserInfor::set_componey(const ::std::string& value) {
  set_has_componey();
  if (componey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componey_ = new ::std::string;
  }
  componey_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserInfor.componey)
}
inline void UserInfor::set_componey(const char* value) {
  set_has_componey();
  if (componey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componey_ = new ::std::string;
  }
  componey_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserInfor.componey)
}
inline void UserInfor::set_componey(const char* value, size_t size) {
  set_has_componey();
  if (componey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componey_ = new ::std::string;
  }
  componey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserInfor.componey)
}
inline ::std::string* UserInfor::mutable_componey() {
  set_has_componey();
  if (componey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserInfor.componey)
  return componey_;
}
inline ::std::string* UserInfor::release_componey() {
  clear_has_componey();
  if (componey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componey_;
    componey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfor::set_allocated_componey(::std::string* componey) {
  if (componey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componey_;
  }
  if (componey) {
    set_has_componey();
    componey_ = componey;
  } else {
    clear_has_componey();
    componey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserInfor.componey)
}

// -------------------------------------------------------------------

// UserSession

// required int32 type = 1;
inline bool UserSession::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSession::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSession::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSession::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserSession::type() const {
  // @@protoc_insertion_point(field_get:dlp.UserSession.type)
  return type_;
}
inline void UserSession::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dlp.UserSession.type)
}

// required string id = 2;
inline bool UserSession::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSession::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSession::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSession::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& UserSession::id() const {
  // @@protoc_insertion_point(field_get:dlp.UserSession.id)
  return *id_;
}
inline void UserSession::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserSession.id)
}
inline void UserSession::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserSession.id)
}
inline void UserSession::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserSession.id)
}
inline ::std::string* UserSession::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserSession.id)
  return id_;
}
inline ::std::string* UserSession::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSession::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserSession.id)
}

// required string cert = 3;
inline bool UserSession::has_cert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSession::set_has_cert() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSession::clear_has_cert() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSession::clear_cert() {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& UserSession::cert() const {
  // @@protoc_insertion_point(field_get:dlp.UserSession.cert)
  return *cert_;
}
inline void UserSession::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserSession.cert)
}
inline void UserSession::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserSession.cert)
}
inline void UserSession::set_cert(const char* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserSession.cert)
}
inline ::std::string* UserSession::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserSession.cert)
  return cert_;
}
inline ::std::string* UserSession::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSession::set_allocated_cert(::std::string* cert) {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (cert) {
    set_has_cert();
    cert_ = cert;
  } else {
    clear_has_cert();
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserSession.cert)
}

// required string time = 4;
inline bool UserSession::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSession::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSession::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSession::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& UserSession::time() const {
  // @@protoc_insertion_point(field_get:dlp.UserSession.time)
  return *time_;
}
inline void UserSession::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:dlp.UserSession.time)
}
inline void UserSession::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:dlp.UserSession.time)
}
inline void UserSession::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dlp.UserSession.time)
}
inline ::std::string* UserSession::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dlp.UserSession.time)
  return time_;
}
inline ::std::string* UserSession::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSession::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dlp.UserSession.time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dlp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_User_2eproto__INCLUDED
