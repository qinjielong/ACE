// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientUser.proto

#ifndef PROTOBUF_ClientUser_2eproto__INCLUDED
#define PROTOBUF_ClientUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DataLock {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientUser_2eproto();
void protobuf_AssignDesc_ClientUser_2eproto();
void protobuf_ShutdownFile_ClientUser_2eproto();

class UserAuthen;
class ClientUserInfor;
class UserSession;

// ===================================================================

class UserAuthen : public ::google::protobuf::Message {
 public:
  UserAuthen();
  virtual ~UserAuthen();

  UserAuthen(const UserAuthen& from);

  inline UserAuthen& operator=(const UserAuthen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuthen& default_instance();

  void Swap(UserAuthen* other);

  // implements Message ----------------------------------------------

  UserAuthen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuthen& from);
  void MergeFrom(const UserAuthen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string keyword = 2;
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 2;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const char* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  inline void set_allocated_keyword(::std::string* keyword);

  // @@protoc_insertion_point(class_scope:DataLock.UserAuthen)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_keyword();
  inline void clear_has_keyword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* keyword_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_ClientUser_2eproto();
  friend void protobuf_AssignDesc_ClientUser_2eproto();
  friend void protobuf_ShutdownFile_ClientUser_2eproto();

  void InitAsDefaultInstance();
  static UserAuthen* default_instance_;
};
// -------------------------------------------------------------------

class ClientUserInfor : public ::google::protobuf::Message {
 public:
  ClientUserInfor();
  virtual ~ClientUserInfor();

  ClientUserInfor(const ClientUserInfor& from);

  inline ClientUserInfor& operator=(const ClientUserInfor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientUserInfor& default_instance();

  void Swap(ClientUserInfor* other);

  // implements Message ----------------------------------------------

  ClientUserInfor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientUserInfor& from);
  void MergeFrom(const ClientUserInfor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string machineCode = 2;
  inline bool has_machinecode() const;
  inline void clear_machinecode();
  static const int kMachineCodeFieldNumber = 2;
  inline const ::std::string& machinecode() const;
  inline void set_machinecode(const ::std::string& value);
  inline void set_machinecode(const char* value);
  inline void set_machinecode(const char* value, size_t size);
  inline ::std::string* mutable_machinecode();
  inline ::std::string* release_machinecode();
  inline void set_allocated_machinecode(::std::string* machinecode);

  // required string machineName = 3;
  inline bool has_machinename() const;
  inline void clear_machinename();
  static const int kMachineNameFieldNumber = 3;
  inline const ::std::string& machinename() const;
  inline void set_machinename(const ::std::string& value);
  inline void set_machinename(const char* value);
  inline void set_machinename(const char* value, size_t size);
  inline ::std::string* mutable_machinename();
  inline ::std::string* release_machinename();
  inline void set_allocated_machinename(::std::string* machinename);

  // required string session = 4;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 4;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  inline void set_allocated_session(::std::string* session);

  // required int32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required int32 partid = 6;
  inline bool has_partid() const;
  inline void clear_partid();
  static const int kPartidFieldNumber = 6;
  inline ::google::protobuf::int32 partid() const;
  inline void set_partid(::google::protobuf::int32 value);

  // required string longintime = 7;
  inline bool has_longintime() const;
  inline void clear_longintime();
  static const int kLongintimeFieldNumber = 7;
  inline const ::std::string& longintime() const;
  inline void set_longintime(const ::std::string& value);
  inline void set_longintime(const char* value);
  inline void set_longintime(const char* value, size_t size);
  inline ::std::string* mutable_longintime();
  inline ::std::string* release_longintime();
  inline void set_allocated_longintime(::std::string* longintime);

  // required string version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required string ip = 9;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 9;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:DataLock.ClientUserInfor)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_machinecode();
  inline void clear_has_machinecode();
  inline void set_has_machinename();
  inline void clear_has_machinename();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_partid();
  inline void clear_has_partid();
  inline void set_has_longintime();
  inline void clear_has_longintime();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* machinecode_;
  ::std::string* machinename_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 state_;
  ::std::string* session_;
  ::std::string* longintime_;
  ::std::string* version_;
  ::std::string* ip_;
  ::google::protobuf::int32 partid_;
  friend void  protobuf_AddDesc_ClientUser_2eproto();
  friend void protobuf_AssignDesc_ClientUser_2eproto();
  friend void protobuf_ShutdownFile_ClientUser_2eproto();

  void InitAsDefaultInstance();
  static ClientUserInfor* default_instance_;
};
// -------------------------------------------------------------------

class UserSession : public ::google::protobuf::Message {
 public:
  UserSession();
  virtual ~UserSession();

  UserSession(const UserSession& from);

  inline UserSession& operator=(const UserSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSession& default_instance();

  void Swap(UserSession* other);

  // implements Message ----------------------------------------------

  UserSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSession& from);
  void MergeFrom(const UserSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string cert = 3;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 3;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const char* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  inline void set_allocated_cert(::std::string* cert);

  // required string time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:DataLock.UserSession)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* cert_;
  ::std::string* time_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_ClientUser_2eproto();
  friend void protobuf_AssignDesc_ClientUser_2eproto();
  friend void protobuf_ShutdownFile_ClientUser_2eproto();

  void InitAsDefaultInstance();
  static UserSession* default_instance_;
};
// ===================================================================


// ===================================================================

// UserAuthen

// required int32 type = 1;
inline bool UserAuthen::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAuthen::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAuthen::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAuthen::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserAuthen::type() const {
  // @@protoc_insertion_point(field_get:DataLock.UserAuthen.type)
  return type_;
}
inline void UserAuthen::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DataLock.UserAuthen.type)
}

// required string keyword = 2;
inline bool UserAuthen::has_keyword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAuthen::set_has_keyword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAuthen::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAuthen::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& UserAuthen::keyword() const {
  // @@protoc_insertion_point(field_get:DataLock.UserAuthen.keyword)
  return *keyword_;
}
inline void UserAuthen::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.UserAuthen.keyword)
}
inline void UserAuthen::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.UserAuthen.keyword)
}
inline void UserAuthen::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.UserAuthen.keyword)
}
inline ::std::string* UserAuthen::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.UserAuthen.keyword)
  return keyword_;
}
inline ::std::string* UserAuthen::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserAuthen::set_allocated_keyword(::std::string* keyword) {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (keyword) {
    set_has_keyword();
    keyword_ = keyword;
  } else {
    clear_has_keyword();
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.UserAuthen.keyword)
}

// -------------------------------------------------------------------

// ClientUserInfor

// required int32 userid = 1;
inline bool ClientUserInfor::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientUserInfor::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientUserInfor::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientUserInfor::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ClientUserInfor::userid() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.userid)
  return userid_;
}
inline void ClientUserInfor::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.userid)
}

// required string machineCode = 2;
inline bool ClientUserInfor::has_machinecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientUserInfor::set_has_machinecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientUserInfor::clear_has_machinecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientUserInfor::clear_machinecode() {
  if (machinecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinecode_->clear();
  }
  clear_has_machinecode();
}
inline const ::std::string& ClientUserInfor::machinecode() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.machineCode)
  return *machinecode_;
}
inline void ClientUserInfor::set_machinecode(const ::std::string& value) {
  set_has_machinecode();
  if (machinecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinecode_ = new ::std::string;
  }
  machinecode_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.machineCode)
}
inline void ClientUserInfor::set_machinecode(const char* value) {
  set_has_machinecode();
  if (machinecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinecode_ = new ::std::string;
  }
  machinecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientUserInfor.machineCode)
}
inline void ClientUserInfor::set_machinecode(const char* value, size_t size) {
  set_has_machinecode();
  if (machinecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinecode_ = new ::std::string;
  }
  machinecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientUserInfor.machineCode)
}
inline ::std::string* ClientUserInfor::mutable_machinecode() {
  set_has_machinecode();
  if (machinecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientUserInfor.machineCode)
  return machinecode_;
}
inline ::std::string* ClientUserInfor::release_machinecode() {
  clear_has_machinecode();
  if (machinecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = machinecode_;
    machinecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientUserInfor::set_allocated_machinecode(::std::string* machinecode) {
  if (machinecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machinecode_;
  }
  if (machinecode) {
    set_has_machinecode();
    machinecode_ = machinecode;
  } else {
    clear_has_machinecode();
    machinecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientUserInfor.machineCode)
}

// required string machineName = 3;
inline bool ClientUserInfor::has_machinename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientUserInfor::set_has_machinename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientUserInfor::clear_has_machinename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientUserInfor::clear_machinename() {
  if (machinename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinename_->clear();
  }
  clear_has_machinename();
}
inline const ::std::string& ClientUserInfor::machinename() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.machineName)
  return *machinename_;
}
inline void ClientUserInfor::set_machinename(const ::std::string& value) {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinename_ = new ::std::string;
  }
  machinename_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.machineName)
}
inline void ClientUserInfor::set_machinename(const char* value) {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinename_ = new ::std::string;
  }
  machinename_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientUserInfor.machineName)
}
inline void ClientUserInfor::set_machinename(const char* value, size_t size) {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinename_ = new ::std::string;
  }
  machinename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientUserInfor.machineName)
}
inline ::std::string* ClientUserInfor::mutable_machinename() {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machinename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientUserInfor.machineName)
  return machinename_;
}
inline ::std::string* ClientUserInfor::release_machinename() {
  clear_has_machinename();
  if (machinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = machinename_;
    machinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientUserInfor::set_allocated_machinename(::std::string* machinename) {
  if (machinename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machinename_;
  }
  if (machinename) {
    set_has_machinename();
    machinename_ = machinename;
  } else {
    clear_has_machinename();
    machinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientUserInfor.machineName)
}

// required string session = 4;
inline bool ClientUserInfor::has_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientUserInfor::set_has_session() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientUserInfor::clear_has_session() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientUserInfor::clear_session() {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& ClientUserInfor::session() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.session)
  return *session_;
}
inline void ClientUserInfor::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.session)
}
inline void ClientUserInfor::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientUserInfor.session)
}
inline void ClientUserInfor::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientUserInfor.session)
}
inline ::std::string* ClientUserInfor::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientUserInfor.session)
  return session_;
}
inline ::std::string* ClientUserInfor::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientUserInfor::set_allocated_session(::std::string* session) {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (session) {
    set_has_session();
    session_ = session;
  } else {
    clear_has_session();
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientUserInfor.session)
}

// required int32 state = 5;
inline bool ClientUserInfor::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientUserInfor::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientUserInfor::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientUserInfor::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ClientUserInfor::state() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.state)
  return state_;
}
inline void ClientUserInfor::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.state)
}

// required int32 partid = 6;
inline bool ClientUserInfor::has_partid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientUserInfor::set_has_partid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientUserInfor::clear_has_partid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientUserInfor::clear_partid() {
  partid_ = 0;
  clear_has_partid();
}
inline ::google::protobuf::int32 ClientUserInfor::partid() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.partid)
  return partid_;
}
inline void ClientUserInfor::set_partid(::google::protobuf::int32 value) {
  set_has_partid();
  partid_ = value;
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.partid)
}

// required string longintime = 7;
inline bool ClientUserInfor::has_longintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientUserInfor::set_has_longintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientUserInfor::clear_has_longintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientUserInfor::clear_longintime() {
  if (longintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longintime_->clear();
  }
  clear_has_longintime();
}
inline const ::std::string& ClientUserInfor::longintime() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.longintime)
  return *longintime_;
}
inline void ClientUserInfor::set_longintime(const ::std::string& value) {
  set_has_longintime();
  if (longintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longintime_ = new ::std::string;
  }
  longintime_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.longintime)
}
inline void ClientUserInfor::set_longintime(const char* value) {
  set_has_longintime();
  if (longintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longintime_ = new ::std::string;
  }
  longintime_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientUserInfor.longintime)
}
inline void ClientUserInfor::set_longintime(const char* value, size_t size) {
  set_has_longintime();
  if (longintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longintime_ = new ::std::string;
  }
  longintime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientUserInfor.longintime)
}
inline ::std::string* ClientUserInfor::mutable_longintime() {
  set_has_longintime();
  if (longintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longintime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientUserInfor.longintime)
  return longintime_;
}
inline ::std::string* ClientUserInfor::release_longintime() {
  clear_has_longintime();
  if (longintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = longintime_;
    longintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientUserInfor::set_allocated_longintime(::std::string* longintime) {
  if (longintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longintime_;
  }
  if (longintime) {
    set_has_longintime();
    longintime_ = longintime;
  } else {
    clear_has_longintime();
    longintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientUserInfor.longintime)
}

// required string version = 8;
inline bool ClientUserInfor::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientUserInfor::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClientUserInfor::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClientUserInfor::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ClientUserInfor::version() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.version)
  return *version_;
}
inline void ClientUserInfor::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.version)
}
inline void ClientUserInfor::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientUserInfor.version)
}
inline void ClientUserInfor::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientUserInfor.version)
}
inline ::std::string* ClientUserInfor::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientUserInfor.version)
  return version_;
}
inline ::std::string* ClientUserInfor::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientUserInfor::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientUserInfor.version)
}

// required string ip = 9;
inline bool ClientUserInfor::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientUserInfor::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClientUserInfor::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClientUserInfor::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ClientUserInfor::ip() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientUserInfor.ip)
  return *ip_;
}
inline void ClientUserInfor::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientUserInfor.ip)
}
inline void ClientUserInfor::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientUserInfor.ip)
}
inline void ClientUserInfor::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientUserInfor.ip)
}
inline ::std::string* ClientUserInfor::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientUserInfor.ip)
  return ip_;
}
inline ::std::string* ClientUserInfor::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientUserInfor::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientUserInfor.ip)
}

// -------------------------------------------------------------------

// UserSession

// required int32 type = 1;
inline bool UserSession::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSession::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSession::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSession::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserSession::type() const {
  // @@protoc_insertion_point(field_get:DataLock.UserSession.type)
  return type_;
}
inline void UserSession::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DataLock.UserSession.type)
}

// required string id = 2;
inline bool UserSession::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSession::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSession::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSession::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& UserSession::id() const {
  // @@protoc_insertion_point(field_get:DataLock.UserSession.id)
  return *id_;
}
inline void UserSession::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.UserSession.id)
}
inline void UserSession::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.UserSession.id)
}
inline void UserSession::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.UserSession.id)
}
inline ::std::string* UserSession::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.UserSession.id)
  return id_;
}
inline ::std::string* UserSession::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSession::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.UserSession.id)
}

// required string cert = 3;
inline bool UserSession::has_cert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSession::set_has_cert() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSession::clear_has_cert() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSession::clear_cert() {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& UserSession::cert() const {
  // @@protoc_insertion_point(field_get:DataLock.UserSession.cert)
  return *cert_;
}
inline void UserSession::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.UserSession.cert)
}
inline void UserSession::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.UserSession.cert)
}
inline void UserSession::set_cert(const char* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.UserSession.cert)
}
inline ::std::string* UserSession::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.UserSession.cert)
  return cert_;
}
inline ::std::string* UserSession::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSession::set_allocated_cert(::std::string* cert) {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (cert) {
    set_has_cert();
    cert_ = cert;
  } else {
    clear_has_cert();
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.UserSession.cert)
}

// required string time = 4;
inline bool UserSession::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSession::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSession::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSession::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& UserSession::time() const {
  // @@protoc_insertion_point(field_get:DataLock.UserSession.time)
  return *time_;
}
inline void UserSession::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.UserSession.time)
}
inline void UserSession::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.UserSession.time)
}
inline void UserSession::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.UserSession.time)
}
inline ::std::string* UserSession::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.UserSession.time)
  return time_;
}
inline ::std::string* UserSession::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSession::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.UserSession.time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataLock

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientUser_2eproto__INCLUDED
