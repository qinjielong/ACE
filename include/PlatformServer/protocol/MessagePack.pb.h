// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePack.proto

#ifndef PROTOBUF_MessagePack_2eproto__INCLUDED
#define PROTOBUF_MessagePack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DataLock {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessagePack_2eproto();
void protobuf_AssignDesc_MessagePack_2eproto();
void protobuf_ShutdownFile_MessagePack_2eproto();

class MessagePack;
class ManagerNotifyMessage;

// ===================================================================

class MessagePack : public ::google::protobuf::Message {
 public:
  MessagePack();
  virtual ~MessagePack();

  MessagePack(const MessagePack& from);

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePack& default_instance();

  void Swap(MessagePack* other);

  // implements Message ----------------------------------------------

  MessagePack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagePack& from);
  void MergeFrom(const MessagePack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // required int32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // required bytes body = 5;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 5;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:DataLock.MessagePack)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 cmd_;
  ::std::string* body_;
  ::google::protobuf::int32 len_;
  friend void  protobuf_AddDesc_MessagePack_2eproto();
  friend void protobuf_AssignDesc_MessagePack_2eproto();
  friend void protobuf_ShutdownFile_MessagePack_2eproto();

  void InitAsDefaultInstance();
  static MessagePack* default_instance_;
};
// -------------------------------------------------------------------

class ManagerNotifyMessage : public ::google::protobuf::Message {
 public:
  ManagerNotifyMessage();
  virtual ~ManagerNotifyMessage();

  ManagerNotifyMessage(const ManagerNotifyMessage& from);

  inline ManagerNotifyMessage& operator=(const ManagerNotifyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagerNotifyMessage& default_instance();

  void Swap(ManagerNotifyMessage* other);

  // implements Message ----------------------------------------------

  ManagerNotifyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManagerNotifyMessage& from);
  void MergeFrom(const ManagerNotifyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ids = 1;
  inline bool has_ids() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline const ::std::string& ids() const;
  inline void set_ids(const ::std::string& value);
  inline void set_ids(const char* value);
  inline void set_ids(const char* value, size_t size);
  inline ::std::string* mutable_ids();
  inline ::std::string* release_ids();
  inline void set_allocated_ids(::std::string* ids);

  // @@protoc_insertion_point(class_scope:DataLock.ManagerNotifyMessage)
 private:
  inline void set_has_ids();
  inline void clear_has_ids();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ids_;
  friend void  protobuf_AddDesc_MessagePack_2eproto();
  friend void protobuf_AssignDesc_MessagePack_2eproto();
  friend void protobuf_ShutdownFile_MessagePack_2eproto();

  void InitAsDefaultInstance();
  static ManagerNotifyMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// MessagePack

// required string id = 1;
inline bool MessagePack::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessagePack::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessagePack::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessagePack::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MessagePack::id() const {
  // @@protoc_insertion_point(field_get:DataLock.MessagePack.id)
  return *id_;
}
inline void MessagePack::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.MessagePack.id)
}
inline void MessagePack::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.MessagePack.id)
}
inline void MessagePack::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.MessagePack.id)
}
inline ::std::string* MessagePack::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.MessagePack.id)
  return id_;
}
inline ::std::string* MessagePack::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePack::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.MessagePack.id)
}

// required int32 type = 2;
inline bool MessagePack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessagePack::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessagePack::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessagePack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MessagePack::type() const {
  // @@protoc_insertion_point(field_get:DataLock.MessagePack.type)
  return type_;
}
inline void MessagePack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DataLock.MessagePack.type)
}

// required int32 cmd = 3;
inline bool MessagePack::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessagePack::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessagePack::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessagePack::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 MessagePack::cmd() const {
  // @@protoc_insertion_point(field_get:DataLock.MessagePack.cmd)
  return cmd_;
}
inline void MessagePack::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:DataLock.MessagePack.cmd)
}

// required int32 len = 4;
inline bool MessagePack::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessagePack::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessagePack::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessagePack::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 MessagePack::len() const {
  // @@protoc_insertion_point(field_get:DataLock.MessagePack.len)
  return len_;
}
inline void MessagePack::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:DataLock.MessagePack.len)
}

// required bytes body = 5;
inline bool MessagePack::has_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessagePack::set_has_body() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessagePack::clear_has_body() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessagePack::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& MessagePack::body() const {
  // @@protoc_insertion_point(field_get:DataLock.MessagePack.body)
  return *body_;
}
inline void MessagePack::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.MessagePack.body)
}
inline void MessagePack::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.MessagePack.body)
}
inline void MessagePack::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.MessagePack.body)
}
inline ::std::string* MessagePack::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.MessagePack.body)
  return body_;
}
inline ::std::string* MessagePack::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePack::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.MessagePack.body)
}

// -------------------------------------------------------------------

// ManagerNotifyMessage

// required string ids = 1;
inline bool ManagerNotifyMessage::has_ids() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagerNotifyMessage::set_has_ids() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManagerNotifyMessage::clear_has_ids() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManagerNotifyMessage::clear_ids() {
  if (ids_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ids_->clear();
  }
  clear_has_ids();
}
inline const ::std::string& ManagerNotifyMessage::ids() const {
  // @@protoc_insertion_point(field_get:DataLock.ManagerNotifyMessage.ids)
  return *ids_;
}
inline void ManagerNotifyMessage::set_ids(const ::std::string& value) {
  set_has_ids();
  if (ids_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ids_ = new ::std::string;
  }
  ids_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ManagerNotifyMessage.ids)
}
inline void ManagerNotifyMessage::set_ids(const char* value) {
  set_has_ids();
  if (ids_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ids_ = new ::std::string;
  }
  ids_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ManagerNotifyMessage.ids)
}
inline void ManagerNotifyMessage::set_ids(const char* value, size_t size) {
  set_has_ids();
  if (ids_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ids_ = new ::std::string;
  }
  ids_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ManagerNotifyMessage.ids)
}
inline ::std::string* ManagerNotifyMessage::mutable_ids() {
  set_has_ids();
  if (ids_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ids_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ManagerNotifyMessage.ids)
  return ids_;
}
inline ::std::string* ManagerNotifyMessage::release_ids() {
  clear_has_ids();
  if (ids_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ids_;
    ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ManagerNotifyMessage::set_allocated_ids(::std::string* ids) {
  if (ids_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ids_;
  }
  if (ids) {
    set_has_ids();
    ids_ = ids;
  } else {
    clear_has_ids();
    ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ManagerNotifyMessage.ids)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataLock

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessagePack_2eproto__INCLUDED
