// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientJoin.proto

#ifndef PROTOBUF_ClientJoin_2eproto__INCLUDED
#define PROTOBUF_ClientJoin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DataLock {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientJoin_2eproto();
void protobuf_AssignDesc_ClientJoin_2eproto();
void protobuf_ShutdownFile_ClientJoin_2eproto();

class ClientJoinMessage;
class ClientJoinMessageRsp;

// ===================================================================

class ClientJoinMessage : public ::google::protobuf::Message {
 public:
  ClientJoinMessage();
  virtual ~ClientJoinMessage();

  ClientJoinMessage(const ClientJoinMessage& from);

  inline ClientJoinMessage& operator=(const ClientJoinMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientJoinMessage& default_instance();

  void Swap(ClientJoinMessage* other);

  // implements Message ----------------------------------------------

  ClientJoinMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientJoinMessage& from);
  void MergeFrom(const ClientJoinMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required string ver = 2;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 2;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // required string keyword = 3;
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 3;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const char* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  inline void set_allocated_keyword(::std::string* keyword);

  // required int32 enctype = 4;
  inline bool has_enctype() const;
  inline void clear_enctype();
  static const int kEnctypeFieldNumber = 4;
  inline ::google::protobuf::int32 enctype() const;
  inline void set_enctype(::google::protobuf::int32 value);

  // required int32 srvid = 5;
  inline bool has_srvid() const;
  inline void clear_srvid();
  static const int kSrvidFieldNumber = 5;
  inline ::google::protobuf::int32 srvid() const;
  inline void set_srvid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DataLock.ClientJoinMessage)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_keyword();
  inline void clear_has_keyword();
  inline void set_has_enctype();
  inline void clear_has_enctype();
  inline void set_has_srvid();
  inline void clear_has_srvid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sid_;
  ::std::string* ver_;
  ::std::string* keyword_;
  ::google::protobuf::int32 enctype_;
  ::google::protobuf::int32 srvid_;
  friend void  protobuf_AddDesc_ClientJoin_2eproto();
  friend void protobuf_AssignDesc_ClientJoin_2eproto();
  friend void protobuf_ShutdownFile_ClientJoin_2eproto();

  void InitAsDefaultInstance();
  static ClientJoinMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientJoinMessageRsp : public ::google::protobuf::Message {
 public:
  ClientJoinMessageRsp();
  virtual ~ClientJoinMessageRsp();

  ClientJoinMessageRsp(const ClientJoinMessageRsp& from);

  inline ClientJoinMessageRsp& operator=(const ClientJoinMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientJoinMessageRsp& default_instance();

  void Swap(ClientJoinMessageRsp* other);

  // implements Message ----------------------------------------------

  ClientJoinMessageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientJoinMessageRsp& from);
  void MergeFrom(const ClientJoinMessageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline bool res() const;
  inline void set_res(bool value);

  // required string servers = 2;
  inline bool has_servers() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 2;
  inline const ::std::string& servers() const;
  inline void set_servers(const ::std::string& value);
  inline void set_servers(const char* value);
  inline void set_servers(const char* value, size_t size);
  inline ::std::string* mutable_servers();
  inline ::std::string* release_servers();
  inline void set_allocated_servers(::std::string* servers);

  // @@protoc_insertion_point(class_scope:DataLock.ClientJoinMessageRsp)
 private:
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_servers();
  inline void clear_has_servers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servers_;
  bool res_;
  friend void  protobuf_AddDesc_ClientJoin_2eproto();
  friend void protobuf_AssignDesc_ClientJoin_2eproto();
  friend void protobuf_ShutdownFile_ClientJoin_2eproto();

  void InitAsDefaultInstance();
  static ClientJoinMessageRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientJoinMessage

// required string sid = 1;
inline bool ClientJoinMessage::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientJoinMessage::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientJoinMessage::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientJoinMessage::clear_sid() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& ClientJoinMessage::sid() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientJoinMessage.sid)
  return *sid_;
}
inline void ClientJoinMessage::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientJoinMessage.sid)
}
inline void ClientJoinMessage::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientJoinMessage.sid)
}
inline void ClientJoinMessage::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientJoinMessage.sid)
}
inline ::std::string* ClientJoinMessage::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientJoinMessage.sid)
  return sid_;
}
inline ::std::string* ClientJoinMessage::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientJoinMessage::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientJoinMessage.sid)
}

// required string ver = 2;
inline bool ClientJoinMessage::has_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientJoinMessage::set_has_ver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientJoinMessage::clear_has_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientJoinMessage::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& ClientJoinMessage::ver() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientJoinMessage.ver)
  return *ver_;
}
inline void ClientJoinMessage::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientJoinMessage.ver)
}
inline void ClientJoinMessage::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientJoinMessage.ver)
}
inline void ClientJoinMessage::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientJoinMessage.ver)
}
inline ::std::string* ClientJoinMessage::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientJoinMessage.ver)
  return ver_;
}
inline ::std::string* ClientJoinMessage::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientJoinMessage::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientJoinMessage.ver)
}

// required string keyword = 3;
inline bool ClientJoinMessage::has_keyword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientJoinMessage::set_has_keyword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientJoinMessage::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientJoinMessage::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& ClientJoinMessage::keyword() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientJoinMessage.keyword)
  return *keyword_;
}
inline void ClientJoinMessage::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientJoinMessage.keyword)
}
inline void ClientJoinMessage::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientJoinMessage.keyword)
}
inline void ClientJoinMessage::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientJoinMessage.keyword)
}
inline ::std::string* ClientJoinMessage::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keyword_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientJoinMessage.keyword)
  return keyword_;
}
inline ::std::string* ClientJoinMessage::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientJoinMessage::set_allocated_keyword(::std::string* keyword) {
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (keyword) {
    set_has_keyword();
    keyword_ = keyword;
  } else {
    clear_has_keyword();
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientJoinMessage.keyword)
}

// required int32 enctype = 4;
inline bool ClientJoinMessage::has_enctype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientJoinMessage::set_has_enctype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientJoinMessage::clear_has_enctype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientJoinMessage::clear_enctype() {
  enctype_ = 0;
  clear_has_enctype();
}
inline ::google::protobuf::int32 ClientJoinMessage::enctype() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientJoinMessage.enctype)
  return enctype_;
}
inline void ClientJoinMessage::set_enctype(::google::protobuf::int32 value) {
  set_has_enctype();
  enctype_ = value;
  // @@protoc_insertion_point(field_set:DataLock.ClientJoinMessage.enctype)
}

// required int32 srvid = 5;
inline bool ClientJoinMessage::has_srvid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientJoinMessage::set_has_srvid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientJoinMessage::clear_has_srvid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientJoinMessage::clear_srvid() {
  srvid_ = 0;
  clear_has_srvid();
}
inline ::google::protobuf::int32 ClientJoinMessage::srvid() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientJoinMessage.srvid)
  return srvid_;
}
inline void ClientJoinMessage::set_srvid(::google::protobuf::int32 value) {
  set_has_srvid();
  srvid_ = value;
  // @@protoc_insertion_point(field_set:DataLock.ClientJoinMessage.srvid)
}

// -------------------------------------------------------------------

// ClientJoinMessageRsp

// required bool res = 1;
inline bool ClientJoinMessageRsp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientJoinMessageRsp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientJoinMessageRsp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientJoinMessageRsp::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool ClientJoinMessageRsp::res() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientJoinMessageRsp.res)
  return res_;
}
inline void ClientJoinMessageRsp::set_res(bool value) {
  set_has_res();
  res_ = value;
  // @@protoc_insertion_point(field_set:DataLock.ClientJoinMessageRsp.res)
}

// required string servers = 2;
inline bool ClientJoinMessageRsp::has_servers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientJoinMessageRsp::set_has_servers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientJoinMessageRsp::clear_has_servers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientJoinMessageRsp::clear_servers() {
  if (servers_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servers_->clear();
  }
  clear_has_servers();
}
inline const ::std::string& ClientJoinMessageRsp::servers() const {
  // @@protoc_insertion_point(field_get:DataLock.ClientJoinMessageRsp.servers)
  return *servers_;
}
inline void ClientJoinMessageRsp::set_servers(const ::std::string& value) {
  set_has_servers();
  if (servers_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servers_ = new ::std::string;
  }
  servers_->assign(value);
  // @@protoc_insertion_point(field_set:DataLock.ClientJoinMessageRsp.servers)
}
inline void ClientJoinMessageRsp::set_servers(const char* value) {
  set_has_servers();
  if (servers_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servers_ = new ::std::string;
  }
  servers_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataLock.ClientJoinMessageRsp.servers)
}
inline void ClientJoinMessageRsp::set_servers(const char* value, size_t size) {
  set_has_servers();
  if (servers_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servers_ = new ::std::string;
  }
  servers_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataLock.ClientJoinMessageRsp.servers)
}
inline ::std::string* ClientJoinMessageRsp::mutable_servers() {
  set_has_servers();
  if (servers_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servers_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataLock.ClientJoinMessageRsp.servers)
  return servers_;
}
inline ::std::string* ClientJoinMessageRsp::release_servers() {
  clear_has_servers();
  if (servers_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servers_;
    servers_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientJoinMessageRsp::set_allocated_servers(::std::string* servers) {
  if (servers_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servers_;
  }
  if (servers) {
    set_has_servers();
    servers_ = servers;
  } else {
    clear_has_servers();
    servers_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataLock.ClientJoinMessageRsp.servers)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataLock

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientJoin_2eproto__INCLUDED
