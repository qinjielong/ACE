// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientJoin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientJoin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataLock {

namespace {

const ::google::protobuf::Descriptor* ClientJoinMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientJoinMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientJoinMessageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientJoinMessageRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientJoin_2eproto() {
  protobuf_AddDesc_ClientJoin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientJoin.proto");
  GOOGLE_CHECK(file != NULL);
  ClientJoinMessage_descriptor_ = file->message_type(0);
  static const int ClientJoinMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessage, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessage, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessage, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessage, enctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessage, srvid_),
  };
  ClientJoinMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientJoinMessage_descriptor_,
      ClientJoinMessage::default_instance_,
      ClientJoinMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientJoinMessage));
  ClientJoinMessageRsp_descriptor_ = file->message_type(1);
  static const int ClientJoinMessageRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessageRsp, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessageRsp, servers_),
  };
  ClientJoinMessageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientJoinMessageRsp_descriptor_,
      ClientJoinMessageRsp::default_instance_,
      ClientJoinMessageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientJoinMessageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientJoinMessageRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientJoin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientJoinMessage_descriptor_, &ClientJoinMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientJoinMessageRsp_descriptor_, &ClientJoinMessageRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientJoin_2eproto() {
  delete ClientJoinMessage::default_instance_;
  delete ClientJoinMessage_reflection_;
  delete ClientJoinMessageRsp::default_instance_;
  delete ClientJoinMessageRsp_reflection_;
}

void protobuf_AddDesc_ClientJoin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ClientJoin.proto\022\010DataLock\"^\n\021ClientJo"
    "inMessage\022\013\n\003sid\030\001 \002(\t\022\013\n\003ver\030\002 \002(\t\022\017\n\007k"
    "eyword\030\003 \002(\t\022\017\n\007enctype\030\004 \002(\005\022\r\n\005srvid\030\005"
    " \002(\005\"4\n\024ClientJoinMessageRsp\022\013\n\003res\030\001 \002("
    "\010\022\017\n\007servers\030\002 \002(\tB$\n\020com.dlp.datalockB\020"
    "ClientJoinProtos", 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientJoin.proto", &protobuf_RegisterTypes);
  ClientJoinMessage::default_instance_ = new ClientJoinMessage();
  ClientJoinMessageRsp::default_instance_ = new ClientJoinMessageRsp();
  ClientJoinMessage::default_instance_->InitAsDefaultInstance();
  ClientJoinMessageRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientJoin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientJoin_2eproto {
  StaticDescriptorInitializer_ClientJoin_2eproto() {
    protobuf_AddDesc_ClientJoin_2eproto();
  }
} static_descriptor_initializer_ClientJoin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientJoinMessage::kSidFieldNumber;
const int ClientJoinMessage::kVerFieldNumber;
const int ClientJoinMessage::kKeywordFieldNumber;
const int ClientJoinMessage::kEnctypeFieldNumber;
const int ClientJoinMessage::kSrvidFieldNumber;
#endif  // !_MSC_VER

ClientJoinMessage::ClientJoinMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataLock.ClientJoinMessage)
}

void ClientJoinMessage::InitAsDefaultInstance() {
}

ClientJoinMessage::ClientJoinMessage(const ClientJoinMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataLock.ClientJoinMessage)
}

void ClientJoinMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enctype_ = 0;
  srvid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientJoinMessage::~ClientJoinMessage() {
  // @@protoc_insertion_point(destructor:DataLock.ClientJoinMessage)
  SharedDtor();
}

void ClientJoinMessage::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyword_;
  }
  if (this != default_instance_) {
  }
}

void ClientJoinMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientJoinMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientJoinMessage_descriptor_;
}

const ClientJoinMessage& ClientJoinMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientJoin_2eproto();
  return *default_instance_;
}

ClientJoinMessage* ClientJoinMessage::default_instance_ = NULL;

ClientJoinMessage* ClientJoinMessage::New() const {
  return new ClientJoinMessage;
}

void ClientJoinMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientJoinMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(enctype_, srvid_);
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sid_->clear();
      }
    }
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyword_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientJoinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataLock.ClientJoinMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ver;
        break;
      }

      // required string ver = 2;
      case 2: {
        if (tag == 18) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keyword;
        break;
      }

      // required string keyword = 3;
      case 3: {
        if (tag == 26) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enctype;
        break;
      }

      // required int32 enctype = 4;
      case 4: {
        if (tag == 32) {
         parse_enctype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enctype_)));
          set_has_enctype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_srvid;
        break;
      }

      // required int32 srvid = 5;
      case 5: {
        if (tag == 40) {
         parse_srvid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srvid_)));
          set_has_srvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataLock.ClientJoinMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataLock.ClientJoinMessage)
  return false;
#undef DO_
}

void ClientJoinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataLock.ClientJoinMessage)
  // required string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sid(), output);
  }

  // required string ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ver(), output);
  }

  // required string keyword = 3;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->keyword(), output);
  }

  // required int32 enctype = 4;
  if (has_enctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enctype(), output);
  }

  // required int32 srvid = 5;
  if (has_srvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->srvid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataLock.ClientJoinMessage)
}

::google::protobuf::uint8* ClientJoinMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataLock.ClientJoinMessage)
  // required string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }

  // required string ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ver(), target);
  }

  // required string keyword = 3;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keyword(), target);
  }

  // required int32 enctype = 4;
  if (has_enctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enctype(), target);
  }

  // required int32 srvid = 5;
  if (has_srvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->srvid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataLock.ClientJoinMessage)
  return target;
}

int ClientJoinMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // required string ver = 2;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // required string keyword = 3;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // required int32 enctype = 4;
    if (has_enctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enctype());
    }

    // required int32 srvid = 5;
    if (has_srvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srvid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientJoinMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientJoinMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientJoinMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientJoinMessage::MergeFrom(const ClientJoinMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_enctype()) {
      set_enctype(from.enctype());
    }
    if (from.has_srvid()) {
      set_srvid(from.srvid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientJoinMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientJoinMessage::CopyFrom(const ClientJoinMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientJoinMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClientJoinMessage::Swap(ClientJoinMessage* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(ver_, other->ver_);
    std::swap(keyword_, other->keyword_);
    std::swap(enctype_, other->enctype_);
    std::swap(srvid_, other->srvid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientJoinMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientJoinMessage_descriptor_;
  metadata.reflection = ClientJoinMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientJoinMessageRsp::kResFieldNumber;
const int ClientJoinMessageRsp::kServersFieldNumber;
#endif  // !_MSC_VER

ClientJoinMessageRsp::ClientJoinMessageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataLock.ClientJoinMessageRsp)
}

void ClientJoinMessageRsp::InitAsDefaultInstance() {
}

ClientJoinMessageRsp::ClientJoinMessageRsp(const ClientJoinMessageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataLock.ClientJoinMessageRsp)
}

void ClientJoinMessageRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  res_ = false;
  servers_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientJoinMessageRsp::~ClientJoinMessageRsp() {
  // @@protoc_insertion_point(destructor:DataLock.ClientJoinMessageRsp)
  SharedDtor();
}

void ClientJoinMessageRsp::SharedDtor() {
  if (servers_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servers_;
  }
  if (this != default_instance_) {
  }
}

void ClientJoinMessageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientJoinMessageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientJoinMessageRsp_descriptor_;
}

const ClientJoinMessageRsp& ClientJoinMessageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientJoin_2eproto();
  return *default_instance_;
}

ClientJoinMessageRsp* ClientJoinMessageRsp::default_instance_ = NULL;

ClientJoinMessageRsp* ClientJoinMessageRsp::New() const {
  return new ClientJoinMessageRsp;
}

void ClientJoinMessageRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    res_ = false;
    if (has_servers()) {
      if (servers_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servers_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientJoinMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataLock.ClientJoinMessageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool res = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        break;
      }

      // required string servers = 2;
      case 2: {
        if (tag == 18) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servers().data(), this->servers().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataLock.ClientJoinMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataLock.ClientJoinMessageRsp)
  return false;
#undef DO_
}

void ClientJoinMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataLock.ClientJoinMessageRsp)
  // required bool res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->res(), output);
  }

  // required string servers = 2;
  if (has_servers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servers().data(), this->servers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->servers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataLock.ClientJoinMessageRsp)
}

::google::protobuf::uint8* ClientJoinMessageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataLock.ClientJoinMessageRsp)
  // required bool res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->res(), target);
  }

  // required string servers = 2;
  if (has_servers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servers().data(), this->servers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataLock.ClientJoinMessageRsp)
  return target;
}

int ClientJoinMessageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool res = 1;
    if (has_res()) {
      total_size += 1 + 1;
    }

    // required string servers = 2;
    if (has_servers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientJoinMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientJoinMessageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientJoinMessageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientJoinMessageRsp::MergeFrom(const ClientJoinMessageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_servers()) {
      set_servers(from.servers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientJoinMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientJoinMessageRsp::CopyFrom(const ClientJoinMessageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientJoinMessageRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientJoinMessageRsp::Swap(ClientJoinMessageRsp* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(servers_, other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientJoinMessageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientJoinMessageRsp_descriptor_;
  metadata.reflection = ClientJoinMessageRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataLock

// @@protoc_insertion_point(global_scope)
